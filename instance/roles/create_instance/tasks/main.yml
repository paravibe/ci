---
- name: Set distr version to php5
  set_fact:
    distr: "php5"
    intsall_path: "/etc/php5"
  when: php_version == 5
  tags:
    - always

- name: Set distr version to php7.0
  set_fact:
    distr: "php7.0"
    intsall_path: "/etc/php/7.0"
  when: php_version == 7
  tags:
    - always

- name: Generate new password
  shell: echo "{{ password_salt }}_$(date +%s)" | sha256sum | base64 | head -c 16; echo
  register: user_pass

- name: Generate password hash
  shell: python -c 'import crypt; print crypt.crypt("{{ user_pass.stdout }}", "$1$afRgT$")'
  register: user_pass_hash

- name: Create new user
  user: >
    name={{ instance_user }}
    comment={{ instance_user | capitalize }}
    password={{ user_pass_hash.stdout }}
    generate_ssh_key=yes
    ssh_key_comment="{{ instance_user }}@{{ ansible_hostname }}"
    update_password=on_create
    state=present
  register: user_create
  notify:
    - print user pass
    - print ssh key
    - send email

- name: Check if zsh installed
  stat: path=/bin/zsh
  register: zsh
  when: user_create.changed

- name: Set zsh shell for user
  user: name={{ instance_user }} shell=/bin/zsh
  when: user_create.changed and zsh.stat.exists

- name: Set pass if user exist
  set_fact:
    user_password: "{{ instance_user_pass }}"
  when: not user_create.changed

- name: Set pass if user not exist
  set_fact:
    user_password: "{{ user_pass.stdout }}"
  when: user_create.changed

- name: Copy .zshrc
  template: src=zshrc.j2 dest="/home/{{ instance_user }}/.zshrc"
  when: user_create.changed

- name: Get user SSH key
  shell: cat "/home/{{ instance_user }}/.ssh/id_rsa.pub"
  register: user_ssh_key
  when: user_create.changed

- name: Add MySQL user
  mysql_user: >
    login_user=root
    login_password="{{ mysql_root_pass }}"
    name="{{ instance_user }}"
    password="{{ user_pass.stdout }}"
    priv="{{ instance_user }}\_%.*:ALL,GRANT"
  notify:
    - print user pass
  when: (user_create.changed and mysql_root_pass != False)

- name: Add MySQL database
  mysql_db: >
    login_user=root
    login_password="{{ mysql_root_pass }}"
    name="{{ instance_user }}_{{ instance_name }}"
    state=present
  when: mysql_root_pass != False

- name: Create dir structure for user
  file: >
    path="/home/{{ instance_user }}/www/{{ instance_env }}/{{ item }}"
    owner="{{ instance_user }}"
    recurse=yes
    state=directory
  with_items:
    - resources
    - logs

- name: Create resource dir
  file: >
    path="/home/{{ instance_user }}/www/{{ instance_env }}/resources/{{ add_settings_php_folder }}"
    owner="{{ instance_user }}"
    state=directory
  when: add_settings_php_folder != False

- name: Put default settings.php file
  template: >
    src=settings.php.j2
    dest="/home/{{ instance_user }}/www/{{ instance_env }}/resources/{{ add_settings_php_folder }}/settings.php"
    owner="{{ instance_user }}"
  when: add_settings_php_folder != False and (user_create.changed or instance_user_pass != False)

- name: Check if .htpasswd exist
  stat: path="/home/{{ instance_user }}/www/{{ instance_env }}/.htpasswd"
  register: htpasswd
  when: basic_auth_create

- name: Create .htpasswd file
  htpasswd: path="/home/{{ instance_user }}/www/{{ instance_env }}/.htpasswd" name={{ instance_name }} password="{{ basic_auth_password }}" owner=root group=www-data mode=0660
  when: basic_auth_create and not htpasswd.stat.exists

- name: Create nginx virtual host
  template: src=nginx_vhost.j2 dest="/etc/nginx/sites-available/{{ instance_env }}_{{ instance_name }}"
  notify:
    - restart nginx
  tags:
    - nginxvhost

- name: Enable vhost
  file: >
    src="/etc/nginx/sites-available/{{ instance_env }}_{{ instance_name }}"
    dest="/etc/nginx/sites-enabled/{{ instance_env }}_{{ instance_name }}"
    state=link
  tags:
    - nginxvhost

- name: Install drupal cron
  cron: >
    name="{{ instance_name }} {{ instance_env }} cron job"
    day="{{ drupal_cron_renewal_frequency.day }}"
    hour="{{ drupal_cron_renewal_frequency.hour }}"
    minute="{{ drupal_cron_renewal_frequency.minute }}"
    job="cd /home/{{ instance_user }}/www/{{ instance_env }}/current/sites/{{ add_settings_php_folder }} && drush elysia-cron run > /dev/null 2>&1"
  when: add_settings_php_folder != False