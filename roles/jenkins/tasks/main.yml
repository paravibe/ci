---
- name: Add Jenkins apt-key
  sudo: yes
  action: apt_key url={{ jenkins_repo_key }} state=present

- name: Add Jenkins repository
  apt_repository: repo='{{ jenkins_repo_url }}' state=present update_cache=yes

- name: Install Jenkins
  apt: name=jenkins state=present
  notify:
    - restart jenkins

- name: Change Jenkins port
  replace: dest=/etc/default/jenkins regexp="^(HTTP_PORT=8080)$" replace="HTTP_PORT={{ jenkins_port }}"

- name: Restart Jenkins
  service: name=jenkins state=restarted enabled=yes

- name: Generate ssh key
  user: >
    name=jenkins
    generate_ssh_key=yes
    ssh_key_comment="jenkins@{{ ansible_hostname }}"
  register: jenkins_ssh_key

- name: Copy nginx vhost
  template: src=nginx_vhost.j2 dest=/etc/nginx/sites-available/jenkins

- name: Enable vhost
  file: >
    src=/etc/nginx/sites-available/jenkins
    dest=/etc/nginx/sites-enabled/jenkins
    state=link
  notify:
    - restart nginx

- name: Get Jenkins home directory
  shell: "awk -F: -v v='jenkins' '{if ($1==v) print $6}' /etc/passwd"
  register: jenkins_home

- name: Generate password hash
  shell: echo -n "{{ jenkins_user_pass }}{"{{jenkins_pass_salt }}"}" | sha256sum | head -c 64; echo
  register: jenkins_pass_hash

- include: plugins.yml

- name: Get Jenkins updates
  sudo: yes
  action: get_url url=http://updates.jenkins-ci.org/update-center.json dest={{ jenkins_updates_file }} thirsty=yes mode=0440
  register: jenkins_updates

- name: Update-center Jenkins
  sudo: yes
  action: "shell cat {{ jenkins_updates_file }} | sed '1d;$d' | curl -X POST -H 'Accept: application/json' -d @- http://{{ jenkins_hostname }}:{{ jenkins_port }}/updateCenter/byId/default/postBack"
  when: jenkins_updates.changed
  notify:
    - restart jenkins

- name: Create user directory
  file: >
    path="{{ jenkins_home.stdout }}/users/{{ jenkins_user_name }}"
    owner=jenkins
    group=jenkins
    state=directory

- name: Copy user config
  template: >
    src=configs/users/config.xml.j2
    dest={{ jenkins_home.stdout }}/users/{{ jenkins_user_name }}/config.xml
    owner=jenkins
    group=jenkins
  notify:
    - restart jenkins

- name: Copy global configuration
  template: >
    src=configs/config.xml.j2
    dest={{ jenkins_home.stdout }}/config.xml
    owner=jenkins
    group=jenkins
  notify:
    - restart jenkins

- name: Create TEMPLATE_MR job directory
  file: >
    path="{{ jenkins_home.stdout }}/jobs/TEMPLATE_MR"
    owner=jenkins
    group=jenkins
    state=directory

- name: Create TEMPLATE_MR job
  template: >
    src=configs/jobs/template/config.xml.j2
    dest={{ jenkins_home.stdout }}/jobs/TEMPLATE_MR/config.xml
    owner=jenkins
    group=jenkins
  notify:
    - restart jenkins

- name: Create credentials.xml
  template: >
    src=configs/credentials.xml.j2
    dest={{ jenkins_home.stdout }}/credentials.xml
    owner=jenkins
    group=jenkins
  notify:
    - restart jenkins

- name: Create org.jenkinsci.plugins.gitlab.GitlabBuildTrigger.xml
  template: >
    src=configs/GitlabBuildTrigger.xml.j2
    dest={{ jenkins_home.stdout }}/org.jenkinsci.plugins.gitlab.GitlabBuildTrigger.xml
    owner=jenkins
    group=jenkins
  notify:
    - restart jenkins

- name: Create hudson.plugins.git.GitSCM.xml
  template: >
    src=configs/GitSCM.xml.j2
    dest={{ jenkins_home.stdout }}/hudson.plugins.git.GitSCM.xml
    owner=jenkins
    group=jenkins
  notify:
    - restart jenkins

- name: Create jenkins.model.JenkinsLocationConfiguration.xml
  template: >
    src=configs/JenkinsLocationConfiguration.xml.j2
    dest={{ jenkins_home.stdout }}/jenkins.model.JenkinsLocationConfiguration.xml
    owner=jenkins
    group=jenkins
  notify:
    - restart jenkins